class LargerNumKey(str):
    def __lt__(x, y):
        return x+y > y+x
        
class Solution:
    def largestNumber(self, nums: List[int]) -> str:
        largest_num = ''.join(sorted(map(str, nums), key=LargerNumKey))
        return '0' if largest_num[0] == '0' else largest_num

"""
  关键在于sorted
  将数字转换成字符串后，相加就相当于拼接操作。
  根据key为定义一个键函数，用于从每个列表元素中提取比较键。也就是说，实际比较大小的是LargerNumKey(nums[m])和LargerNumKey(nums[n]).
  LargerNumKey在定义时，实际上是对python的基类object类的继承。
  Object类中本身自定义了__lt__(self,object)：return sel，用于类与类之间大小的比较（详见python富比较）。
  LargerNumKey中对这个函数进行了重载，所以在LargerNumKey类进行比较的时候，会调用重载后的__lt__(x, y)。
  因此，在Sorted函数运行时，数与数之间比较大小，实际上是对两个LargerNumKey类比较大小，比较时使用的是LargerNumkey中的__lt__函数，谁大谁小的依据不再是值的大小，__lt__函数返回的结果。
"""
